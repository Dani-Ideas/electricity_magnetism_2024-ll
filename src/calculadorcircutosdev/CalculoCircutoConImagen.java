/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package calculadorcircutosdev;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Stack;
/**
 *
 * @author dani-ideas
 */
public class CalculoCircutoConImagen extends javax.swing.JFrame {
    private int caseCircuit=0;
    private int numElemtos=1;
    double temp;
    private Stack<Double> datos = new Stack<>();
    
    public CalculoCircutoConImagen() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    /**
     * Creates new form CalculoCircutoConImagen
     * @param caseCircuitInput
     */
    public CalculoCircutoConImagen(int caseCircuitInput) {
        this.caseCircuit= caseCircuitInput;
        initComponents();
        this.setLocationRelativeTo(null);
    }
    private String updateCircuitImage() {
        switch (caseCircuit) {
            case 1:
                return "/Images/Circuit/SeriesResist.png";
            case 2:
                return "/Images/Circuit/ResistenciaParalelo.png";
            case 3:
                return "/Images/Circuit/ParalelosCap.png";
            default:
                return "/Images/Circuit/SerieCap.png";
            }
    }
    private String updateTextUnit(){
        if(caseCircuit<3)
            return "Resisencia";
        else
            return "Capacitancia";
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRegresarCCCI = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        buttonCalcular = new javax.swing.JButton();
        imageCircuit = new javax.swing.JLabel();
        textoUnides = new javax.swing.JLabel();
        nComponetes = new javax.swing.JSpinner();
        escalaNC = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        buttonAddElement = new javax.swing.JButton();
        buttonDeleteElement = new javax.swing.JButton();
        Resultados = new javax.swing.JLabel();
        jLabelFondo3 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonRegresarCCCI.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        buttonRegresarCCCI.setText("Regresar");
        buttonRegresarCCCI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRegresarCCCIActionPerformed(evt);
            }
        });
        getContentPane().add(buttonRegresarCCCI, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, 110, 50));

        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 110, 50));

        buttonCalcular.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        buttonCalcular.setText("Calcular");
        buttonCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCalcularActionPerformed(evt);
            }
        });
        getContentPane().add(buttonCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 190, 160, 50));

        String directions=updateCircuitImage();
        imageCircuit.setIcon(new javax.swing.ImageIcon(getClass().getResource(directions)));
        imageCircuit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                imageCircuitKeyReleased(evt);
            }
        });
        getContentPane().add(imageCircuit, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 30, -1, -1));

        textoUnides.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        textoUnides.setText(updateTextUnit());
        getContentPane().add(textoUnides, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, 160, 20));

        nComponetes.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 100000.0d, 5.0d));
        nComponetes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nComponetesStateChanged(evt);
            }
        });
        nComponetes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nComponetesKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nComponetesKeyReleased(evt);
            }
        });
        getContentPane().add(nComponetes, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 330, 68, 34));

        escalaNC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "E", "P", "T", "G", "M", "k", " ", "m", "Âµ", "n", "p", "f", "a" }));
        escalaNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escalaNCActionPerformed(evt);
            }
        });
        getContentPane().add(escalaNC, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 330, 61, 34));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Escala ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, -1, -1));

        buttonAddElement.setText("+");
        buttonAddElement.setEnabled(false);
        buttonAddElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddElementActionPerformed(evt);
            }
        });
        getContentPane().add(buttonAddElement, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 330, 40, 34));

        buttonDeleteElement.setText("-");
        buttonDeleteElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteElementActionPerformed(evt);
            }
        });
        buttonDeleteElement.setVisible(false);
        getContentPane().add(buttonDeleteElement, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 330, 40, 34));

        Resultados.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Resultados.setText("Resultados");
        getContentPane().add(Resultados, new org.netbeans.lib.awtextra.AbsoluteConstraints(457, 130, 160, 40));

        jLabelFondo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons/fondo2.jpg"))); // NOI18N
        jLabelFondo3.setText("jLabel1");
        getContentPane().add(jLabelFondo3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 410));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Escala ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("FinalizeCalledExplicitly")
    private void buttonRegresarCCCIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRegresarCCCIActionPerformed
        SeleccionTipoCirciuto ventanaTC= new SeleccionTipoCirciuto();
        ventanaTC.setVisible(true);
        this.setVisible(false);
        try {
            this.finalize();
        } catch (Throwable ex) {
            Logger.getLogger(CalculoCircutoConImagen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonRegresarCCCIActionPerformed

    @SuppressWarnings("FinalizeCalledExplicitly")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
        try {
            this.finalize();
        } catch (Throwable ex) {
            Logger.getLogger(CalculoCircutoConImagen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void escalaNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escalaNCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_escalaNCActionPerformed

    private void buttonAddElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddElementActionPerformed
        numElemtos++;
        buttonDeleteElement.setVisible(true);
        temp=Math.pow(10, (-3 * (escalaNC.getSelectedIndex() - 6)));
        datos.add((double)nComponetes.getValue()*temp);
        //falta agregar el dato en lista/fila/cola(a preferencia del programador) 
    }//GEN-LAST:event_buttonAddElementActionPerformed

    private void buttonDeleteElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteElementActionPerformed
        numElemtos--;
        if (numElemtos<2){
            buttonDeleteElement.setVisible(false);
        }
        if (!datos.empty()){
            System.out.println("Se elimino "+datos.pop());
        }
        
        //falta eliminar el dato en lista/fila/cola(a preferencia del programador) 
    }//GEN-LAST:event_buttonDeleteElementActionPerformed

    private void imageCircuitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imageCircuitKeyReleased
        updateCircuitImage();
    }//GEN-LAST:event_imageCircuitKeyReleased

    private void buttonCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalcularActionPerformed
        // evaluar que la lista/fila/cola(a preferencia del programador) no este vacia, si lo esta gurdar el dato de nComponetesState siempre y cunado se adistinto de cero
        if (datos.empty())
            datos.add((double)nComponetes.getValue());
        
        if (caseCircuit==1)
            mensaje("RT serie ",seriesResistencia());           
        else if (caseCircuit==2)
            mensaje("RT paralelo",resistenciaParalelo());
        else if (caseCircuit==3)
            mensaje("CT Paralelo ",capParalelos());
        else
            mensaje("CT serie ",capSerie());
        // evaluar el tipo de circuito, para saber que formula usar con ayuda de la variable caseCircuit
        // pasar los datos almacenados a la funcion hasta que no falte ninguno
        // mostrar el resultado final de la operacion 
    }//GEN-LAST:event_buttonCalcularActionPerformed

    private void nComponetesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nComponetesKeyReleased
        
    }//GEN-LAST:event_nComponetesKeyReleased

    private void nComponetesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nComponetesKeyPressed
        
    }//GEN-LAST:event_nComponetesKeyPressed

    private double seriesResistencia() {
        double result=0;
        while(!datos.empty())
            result+=datos.pop();
        return result;
    }
    private double resistenciaParalelo() {
        System.out.println("calculadorcircutosdev.CalculoCircutoConImagen.ResistenciaParalelo()");
        if (datos.isEmpty()) {
            throw new IllegalArgumentException("La pila de resistencias estÃ¡ vacÃ­a.");
        }

        double resistenciaTotalInversa = 0.0;

        // Calcular la resistencia total inversa sumando las inversas de las resistencias individuales
        while (!datos.isEmpty()) {
            double resistenciaIndividual = datos.pop();
            
            if (resistenciaIndividual <= 0.0) {
                throw new IllegalArgumentException("Las resistencias deben ser valores positivos.");
            }

            resistenciaTotalInversa += 1.0 / resistenciaIndividual;
        }

        // Calcular la resistencia total tomando la inversa del resultado anterior
        double resistenciaTotal = 1.0 / resistenciaTotalInversa;

        return resistenciaTotal;
    }

    private double capParalelos() {
        if (datos.isEmpty()) {
            throw new IllegalArgumentException("La pila de capacitancias estÃ¡ vacÃ­a.");
        }

        double capacitanciaTotal = 0.0;

        // Sumar las capacitancias individuales para obtener la capacitancia total
        while (!datos.isEmpty()) {
            double capacitanciaIndividual = datos.pop();

            if (capacitanciaIndividual <= 0.0) {
                throw new IllegalArgumentException("Las capacitancias deben ser valores positivos.");
            }

            capacitanciaTotal += capacitanciaIndividual;
        }

        return capacitanciaTotal;
    }

    private double capSerie() {
        if (datos.isEmpty()) {
            throw new IllegalArgumentException("La pila de capacitancias estÃ¡ vacÃ­a.");
        }

        double inversoCapacitanciaTotal = 0.0;

        // Calcular la inversa de la capacitancia total sumando las inversas de las capacitancias individuales
        while (!datos.isEmpty()) {
            double capacitanciaIndividual = datos.pop();

            if (capacitanciaIndividual <= 0.0) {
                throw new IllegalArgumentException("Las capacitancias deben ser valores positivos.");
            }

            inversoCapacitanciaTotal += 1.0 / capacitanciaIndividual;
        }

        // Calcular la capacitancia total tomando la inversa del resultado anterior
        double capacitanciaTotal = 1.0 / inversoCapacitanciaTotal;

        return capacitanciaTotal;

    }

    private void nComponetesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nComponetesStateChanged
        if (!(nComponetes.getValue().equals(0))){
            buttonAddElement.setEnabled(true);
        }else
            buttonAddElement.setEnabled(false);
    }//GEN-LAST:event_nComponetesStateChanged



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Resultados;
    private javax.swing.JButton buttonAddElement;
    private javax.swing.JButton buttonCalcular;
    private javax.swing.JButton buttonDeleteElement;
    private javax.swing.JButton buttonRegresarCCCI;
    private javax.swing.JComboBox<String> escalaNC;
    private javax.swing.JLabel imageCircuit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelFondo3;
    private javax.swing.JSpinner nComponetes;
    private javax.swing.JLabel textoUnides;
    // End of variables declaration//GEN-END:variables

    private void mensaje(String text, double value) {
        Resultados.setText(text+value);
        Resultados.setVisible(true);
    }

}
